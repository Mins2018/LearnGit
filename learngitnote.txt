Git
	1.安装
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
	2.创建版本库
		初始化一个Git仓库，使用git init命令。
		添加文件到Git仓库，分两步：
			1.使用命令git add <file>，注意，可反复多次使用，添加多个文件；
			2.使用命令git commit -m <message>，完成。
	3.状态和差异查询
		•要随时掌握工作区的状态，使用git status命令。
		•如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	4.
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	5.撤销修改
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	6.删除文件
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
	7.远程仓库
		1.注册一个GitHub账号，就可以免费获得Git远程仓库；
		2.创建SSH Key
			$ ssh-keygen -t rsa -C "youremail@example.com"
			-->.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人;
		3.登陆GitHub，添加ssh key，在Key文本框里粘贴id_rsa.pub文件的内容。
	8.添加远程库
		要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；（git remote add origin git@github.com:Mins2018/learngit.git）
		关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
		此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
	9.远程库克隆
		要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆（git clone git@github.com:Mins2018/gitskills.git）。
		Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
	10.创建也合并分支
		Git鼓励大量使用分支：
		查看分支：git branch
		创建分支：git branch <name>
		切换分支：git checkout <name>
		创建+切换分支：git checkout -b <name>
		合并某分支到当前分支：git merge <name>
		删除分支：git branch -d <name>
	11.冲突解决
		当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
		解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
		用git log --graph命令可以看到分支合并图。
	12.合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。（git merge --no-ff -m "merge with no-ff" dev）
	13.Bug分支
		修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
		（恢复有两个办法：
			一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
			另一种方式是用git stash pop，恢复的同时把stash内容也删了：
			）
		git stash list :查询被储存的分支。
	14.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
	15.多人协作
		多人协作的工作模式通常是这样：
			1.首先，可以试图用git push origin <branch-name>推送自己的修改；
			2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
			3.如果合并有冲突，则解决冲突，并在本地提交；
			4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
			如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
		小结：
			•查看远程库信息，使用git remote -v；
			•本地新建的分支如果不推送到远程，对其他人就是不可见的；
			•从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
			•在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
			•建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
			•从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	16.Rebase
		•rebase操作可以把本地未push的分叉提交历史整理成直线；
		•rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。
	17.标签
		•命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		•命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		•命令git tag可以查看所有标签。
		•命令git show <tagname>可以查看标签信息。
		•命令git push origin <tagname>可以推送一个本地标签；
		•命令git push origin --tags可以推送全部未推送过的本地标签；
		•命令git tag -d <tagname>可以删除一个本地标签；
		•命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	18.配置别名
		1.命令配置
			eg：$ git config --global alias.st status（st 代表 status）
			（--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。）
		2.修改配置文件
			每个仓库的Git配置文件都放在.git/config文件中。
			别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
			而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中。
			配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
	19.搭建git服务器
		搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

		假设你已经有sudo权限的用户账号，下面，正式开始安装。

		第一步，安装git：

		$ sudo apt-get install git

		第二步，创建一个git用户，用来运行git服务：

		$ sudo adduser git

		第三步，创建证书登录：

		收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

		第四步，初始化Git仓库：

		先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：

		$ sudo git init --bare sample.git

		Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：

		$ sudo chown -R git:git sample.git

		第五步，禁用shell登录：

		出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：

		git:x:1001:1001:,,,:/home/git:/bin/bash

		改为：

		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell

		这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

		第六步，克隆远程仓库：

		现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：

		$ git clone git@server:/srv/sample.git
		Cloning into 'sample'...
		warning: You appear to have cloned an empty repository.

		剩下的推送就简单了。


		管理公钥
		如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

		这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。


		管理权限
		有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。